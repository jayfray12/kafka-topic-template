apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: kafka-topic-template
  title: Create a Kafka Topic
  description: Create a Kafka Topic for use in your application
  tags:
    - recommended
    - kafka
    - topic
    - amq
spec:
  owner: rhdh
  type: kafka-topic
  parameters:
    - title: Provide Information for the Topic
      required:
        - cluster
        - name
        - owner
        - namespace
      properties:
        cluster:
          title: Cluster
          type: string
          description: Kafka Cluster for this Topic
          default: cp-kafka-dev
          enum: [
              "cp-kafka-core",
              "cp-kafka-dev",
              "cp-kafka-prod"
            ]
        name:
          title: Topic Name
          type: string
          description: Unique name of the topic
          default: my-topic
          maxLength: 23
        partitions:
          title: Partitions
          type: number
          default: 10
          description: The number of partitions
        replicas:
          title: Replication Factor
          type: number
          default: 3
          description: The number of replicas
        namespace:
          title: Namespace
          type: string
          description: OpenShift Namespace for the resource
          default: kafka
          maxLength: 23
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: [Group, User]
        description:
          title: Description
          type: string
          description: Help others understand what this topic is for.
          default: My Awesome Topic
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutTemplating:
          - .github/workflows/*
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          destination: development/${{parameters.name}}
          kcluster: ${{ parameters.cluster }}
          namespace: ${{ parameters.namespace }}
          partitions: ${{ parameters.partitions }}
          replicas: ${{ parameters.replicas }}
          owner: ${{ parameters.owner }}
          cluster: .apps.cluster-c9d4f.c9d4f.sandbox2073.opentlc.com
          source_repository: https://gitlab-gitlab.apps.cluster-c9d4f.c9d4f.sandbox2073.opentlc.com/development/${{parameters.name}}.git
          repository_name: ${{parameters.name}}
          git_owner: development
          host: gitlab-gitlab.apps.cluster-c9d4f.c9d4f.sandbox2073.opentlc.com
          repository_host: gitlab-gitlab.apps.cluster-c9d4f.c9d4f.sandbox2073.opentlc.com
          deployment_name: topic-template
          user: ${{ user.entity.metadata.name }}
    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        repoUrl: "gitlab-gitlab.apps.cluster-c9d4f.c9d4f.sandbox2073.opentlc.com?owner=development&repo=${{parameters.name}}"
        repoVisibility: public

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.name }}-bootstrap
        argoInstance: main
        namespace: janus-argocd
        repoUrl: https://gitlab-gitlab.apps.cluster-c9d4f.c9d4f.sandbox2073.opentlc.com/development/${{ parameters.name }}.git
        path: 'manifests/argocd/'

  output:
    links:
      - title: Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}

